message("(Fresh/CMakeBaseSettings.txt included)")
message("(PROJECT_SOURCE_DIR=${PROJECT_SOURCE_DIR})")
message( "Building app '${APP_NAME}' for platform '${CMAKE_SYSTEM_NAME}'" )

if( ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" )
	set( LINUX "true" )
	message( "Build for Linux.")
endif()

if( UNIX AND EMSCRIPTEN )
	unset( UNIX )
endif()

#### Use Clang compiler on Apple systems
if( APPLE )
	set( CMAKE_CXX_COMPILER_ID		"Clang" )
	set( CMAKE_C_COMPILER           "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang" )
	set( CMAKE_CXX_COMPILER         "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++" )
	set( CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD c++17 )
	set( CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY libc++ )
endif()

#### Functions

if( EMSCRIPTEN )
	set( WHOLE_ARCHIVE_ON "" )
	set( WHOLE_ARCHIVE_OFF "" )
elseif( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" )
	message( "Clang all load" )
	set( WHOLE_ARCHIVE_ON "-Wl,-all_load" )
	set( WHOLE_ARCHIVE_OFF "" )
else()
	set( WHOLE_ARCHIVE_ON "-Wl,-whole-archive" )
	set( WHOLE_ARCHIVE_OFF "-Wl,-no-whole-archive" )
endif()

function( my_link_whole_library target libraryName )
	target_link_libraries( ${target} ${WHOLE_ARCHIVE_ON} ${libraryName} ${WHOLE_ARCHIVE_OFF} )
endfunction( my_link_whole_library )

#### END Functions

#### Initialize CXXFLAGS.

set( CMAKE_CXX_FLAGS "-Wall")

if( WIN32 )
	set( CMAKE_CXX_FLAGS "-std=gnu++17 ${CMAKE_CXX_FLAGS}")
else()
	set( CMAKE_CXX_FLAGS "-std=c++17 -Wno-unused-function ${CMAKE_CXX_FLAGS}")
endif()

set( CMAKE_CXX_FLAGS_DEBUG          "-O0 -g -DDEBUG -DDEV_MODE=1")
set( CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -s -DNDEBUG")
set( CMAKE_CXX_FLAGS_RELEASE        "-O3 -g -s -DNDEBUG -DDEV_MODE=1")
set( CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -s -DDEV_MODE=1" )

if( ${RASPBIAN} )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DRASPBIAN=1" )
elseif( ANDROID )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DANDROID=1" )
elseif( LINUX )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DFRESH_LINUX=1" )
elseif( EMSCRIPTEN )
	set( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s LINKABLE=0 -fPIC" )
	set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -DFRESH_EMSCRIPTEN=1 -s DISABLE_EXCEPTION_CATCHING=0 -s LINKABLE=1" )
	set( CMAKE_CXX_FLAGS_DEBUG          "-s DISABLE_EXCEPTION_CATCHING=0 -O0 -gsource-map -DDEBUG -DDEV_MODE=1")
	set( CMAKE_CXX_FLAGS_MINSIZEREL     "-Os -DNDEBUG")
	set( CMAKE_CXX_FLAGS_RELEASE        "-O3 -DNDEBUG -DDEV_MODE=1")
	set( CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O3 -g -DDEV_MODE=1" )
endif()

#### Compiler-specific C++17 activation.

execute_process( COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE COMPILER_VERSION )
message( "Using compiler ${CMAKE_CXX_COMPILER_ID} ${COMPILER_VERSION} (at ${CMAKE_CXX_COMPILER})" )

if( "${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU" )
    execute_process( COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE COMPILER_VERSION )

    if( NOT( COMPILER_VERSION VERSION_GREATER 4 OR COMPILER_VERSION VERSION_EQUAL 4 ))
        message( FATAL_ERROR "${PROJECT_NAME} requires g++ 4.9 or greater." )
	else()
		message( "Your GNU compiler looks like it supports C++17. Good. Proceeding." )
    endif ()

elseif( "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang" )

else()
	message( "Your C++ compiler does not support C++17! I'll do my best..." )
endif()


### Add cURL package

if( WIN32 )

	# "Find" cURL manually on Windows.
	set( CURL_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/lib/Win/curl/include )
	set( CURL_FOUND TRUE )

elseif( IOS )

	# "Find" cURL manually on iOS.
	set( CURL_INCLUDE_DIRS ${PROJECT_SOURCE_DIR}/lib/curl/ios-appstore/include )
	set( CURL_FOUND TRUE )

elseif( ANDROID )

	# Not supported. No cURL
	set( CURL_FOUND FALSE )

elseif( NOT EMSCRIPTEN AND NOT RASPBIAN )

	find_package( CURL )

endif()

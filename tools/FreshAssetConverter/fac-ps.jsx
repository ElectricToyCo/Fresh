function isInt(n){    return n % 1 === 0;}function getNearestPowTwoLarger( size ){    return Math.pow( 2, ( Math.floor( Math.log( size- 1 ) / Math.log( 2 )) + 1 ));}function findLayer( parent, layerName ){    for( var i = 0; i < parent.length; ++i )    {        var layer = parent[ i ];                if( layer.name == layerName )        {            return layer;        }            else if( typeof layer.layers !== 'undefined' )        {            var result = findLayer( layer.layers, layerName );            if( result )            {                return result;            }        }    }        return null;}function showLayer( layerName, enable ){    var doc = app.activeDocument;        var layer = findLayer( doc.layers, layerName );        var curLayer = layer;        while( curLayer && typeof curLayer !== 'undefined' )    {        curLayer.visible = enable;                if( enable )        {            curLayer = curLayer.parent;        }        else        {            break;        }    }}function isLayerNamed( layer, layerNames ){    var layerName = layer.name;    for( var i = 0; i < layerNames.length; ++i )    {        if( layerNames[ i ] == layerName )        {            return true;        }    }    return false;}function isolateLayers( layerNames ){    isolateLayersWithin( app.activeDocument, layerNames );}function isolateLayersWithin( layer, layerNames ){    if( isLayerNamed( layer, layerNames ))    {        layer.visible = true;        return true;    }        var foundRelevantDescendant = false;    if( typeof layer.layers !== 'undefined' )    {        var childLayers = layer.layers;                for( var i = 0; i < childLayers.length; ++i )        {            var child = childLayers[ i ];                    foundRelevantDescendant = isolateLayersWithin( child, layerNames ) || foundRelevantDescendant;                    }        }    layer.visible = foundRelevantDescendant;    return foundRelevantDescendant;}function showAllLayersRecursive( parent, show ){    for( var i = 0; i < parent.length; ++i )    {        var layer = parent[ i ];        layer.visible = show;                if( typeof layer.layers !== 'undefined' )        {            showAllLayersRecursive( layer.layers, show );        }    }}function showEachAndEveryLayer( show ){    showAllLayersRecursive(  app.activeDocument.layers, show );}function showAllBaseLayers( show ){    for( var i = 0; i < app.activeDocument.layers.length; ++i )    {        var layer = app.activeDocument.layers[ i ];        layer.visible = show;    }}function trimEdges(){    var doc = app.activeDocument;    doc.trim( TrimType.TRANSPARENT );}function getImageSizeText(){    var doc = app.activeDocument;    var text = "( " + doc.width.toString() + ", " + doc.height.toString() + " ) ";    return text;}function resizeToPowTwo( reshapeCanvasElseResizeImage ){    var doc = app.activeDocument;    var desiredCanvasWidth = getNearestPowTwoLarger( doc.width );    var desiredCanvasHeight = getNearestPowTwoLarger( doc.height );        if( reshapeCanvasElseResizeImage )    {        doc.resizeCanvas( desiredCanvasWidth, desiredCanvasHeight );    }    else    {        doc.resizeImage( desiredCanvasWidth, desiredCanvasHeight );    }}function getDocumentByPath( filePath ){    for( var i = 0; i < app.documents.length; ++i )    {        var doc = app.documents[ i ];        if( decodeURI(doc.fullName) == decodeURI(filePath))        {            return doc;        }    }    return null;}function openImage( filePath, forceReopen ){    // Is this file already open?    //    var file = new File( filePath );    // Convert filePath to Photoshop form.        var openDocument = getDocumentByPath( file )        if( openDocument )    {        if( forceReopen )        {            openDocument.close( SaveOptions.DONOTSAVECHANGES );            openDocument = null;        }        else        {            app.activeDocument = openDocument;        }    }        if( !openDocument )    {        app.open( file );    }}function scaleImage( xScale, yScale ){    var doc = app.activeDocument;    doc.resizeImage( doc.width * xScale, doc.height * yScale );}function saveAsJpeg( filepath, quality ){    var doc = app.activeDocument;    var file = new File( filepath );    var saveOptions = new JPEGSaveOptions();    saveOptions.embedColorProfile = true;    saveOptions.formatOptions = FormatOptions.STANDARDBASELINE;    saveOptions.matte = MatteType.NONE;    saveOptions.quality = quality;    doc.saveAs( file, saveOptions, true );}function saveAsPNG( filepath ){    var doc = app.activeDocument;    var file = new File( filepath );    var saveOptions = new PNGSaveOptions();    saveOptions.interlaced = false;    doc.saveAs( file, saveOptions, true );}function closeDocument(){    var doc = app.activeDocument;    doc.close( SaveOptions.DONOTSAVECHANGES );}function cleanup(){    // Restore the document state to when it was opened.    try    {        var doc = app.activeDocument;        doc.activeHistoryState = doc.historyStates[ 0 ];        app.purge( PurgeTarget.HISTORYCACHES );    }    catch( e )    {}}var startRulerUnits = app.preferences.rulerUnits;var startTypeUnits = app.preferences.typeUnits;var startDisplayDialogs = app.displayDialogs;app.preferences.rulerUnits = Units.PIXELS;app.preferences.typeUnits = TypeUnits.PIXELS;app.displayDialogs = DialogModes.NO;app.visible = false;		// Hide in the background.var resultText = "";//////////////////////////////////////////////// PER-IMAGE GENERATED CONVERSION CODEopenImage( "/Users/Jeff/Projects/git/ctcr/src-assets/art/FromMathieu/2013-05-27/PieceSet_Standard_v03_reduced.psd", true );isolateLayers( ["Metal_1_2","Wood_1-2_6"] );/*trimEdges();if( false ){    scaleImage( 0.25, 0.25 );    resizeToPowTwo( false );    saveAsJpeg( "/Users/Jeff/Projects/git/ctcr/docs/Artist Hiring/chibi.jpg", 10 );    //saveAsPNG( "/Users/Jeff/Projects/git/ctcr/docs/Artist Hiring/chibi.png" );    closeDocument();}//////////////////////////////////////////////// SHUTDOWNcleanup();*/// Reset the application preferencesapp.preferences.rulerUnits = startRulerUnits;app.preferences.typeUnits = startTypeUnits;app.displayDialogs = startDisplayDialogs;"Done.";
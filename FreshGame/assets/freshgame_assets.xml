<?xml version="1.0" encoding="UTF-8" ?>

<!-- FreshGame assets -->

<objects>
	
	<object class="ShaderProgramLoader" name="SP_LightDiffuse">
		<vertexShaderSourceText><![CDATA[
			
			uniform mat4 projectionModelViewMatrix;
			uniform mat4 textureMatrix;
			
			attribute vec2 position;
			attribute vec2 texCoord;
			
			varying lowp vec4 fragment_texCoord;
			
			void main()
			{
				gl_Position = projectionModelViewMatrix * vec4( position, 0.0, 1.0 );
			
				fragment_texCoord = textureMatrix * vec4( texCoord, 0.0, 1.0 );
			}
			
			
		]]></vertexShaderSourceText>
		<fragmentShaderSourceText><![CDATA[
			
			uniform sampler2D diffuseTexture;
			uniform lowp vec4 color_multiply;
			
			varying lowp vec4 fragment_texCoord;
			
			void main()
			{
				gl_FragColor = color_multiply * texture2D( diffuseTexture, fragment_texCoord.st );
			}
			
		]]></fragmentShaderSourceText>
		
		
		<vertexStructure>VS_Pos2TexCoord2</vertexStructure>
		
		<passthrough>
			
			<uniformUpdaters>
				<object class="ShaderUniformUpdaterConcrete_mat4">
					<uniformName>projectionModelViewMatrix</uniformName>
					<boundObject>Renderer'renderer'</boundObject>
					<objectMemberName>getProjectionModelViewMatrix</objectMemberName>
				</object>
				<object class="ShaderUniformUpdaterConcrete_mat4">
					<uniformName>textureMatrix</uniformName>
					<boundObject>Renderer'renderer'</boundObject>
					<objectMemberName>getTextureMatrix</objectMemberName>
				</object>
				<object class="ShaderUniformUpdaterConcrete_Color">
					<uniformName>color_multiply</uniformName>
					<boundObject>Renderer'renderer'</boundObject>
					<objectMemberName>getColorMultiply</objectMemberName>
				</object>
			</uniformUpdaters>
		</passthrough>
	</object>

	<object class="ShaderProgramLoader" name="SP_FloorTile">
		<vertexShaderSourceText><![CDATA[
			
			uniform mat4 projectionModelViewMatrix;
			uniform mat4 textureMatrix;
			
			attribute vec2 position;
			attribute vec2 texCoord;
			
			varying lowp vec4 fragment_texCoord;
			
			void main()
			{
				gl_Position = projectionModelViewMatrix * vec4( position, 0.0, 1.0 );
				
				fragment_texCoord = textureMatrix * vec4( texCoord, 0.0, 1.0 );
			}
			
		]]></vertexShaderSourceText>
		<fragmentShaderSourceText><![CDATA[
			
			uniform sampler2D diffuseTexture;
			uniform lowp vec4 color_multiply;
			
			varying lowp vec4 fragment_texCoord;
			
			void main()
			{
				gl_FragColor = color_multiply * texture2D( diffuseTexture, fragment_texCoord.st );
			}
			
		]]></fragmentShaderSourceText>
		
		<vertexStructure>VS_Pos2TexCoord2</vertexStructure>
		
		<passthrough>
			
			<uniformUpdaters>
				<object class="ShaderUniformUpdaterConcrete_mat4">
					<uniformName>projectionModelViewMatrix</uniformName>
					<boundObject>Renderer'renderer'</boundObject>
					<objectMemberName>getProjectionModelViewMatrix</objectMemberName>
				</object>
				<object class="ShaderUniformUpdaterConcrete_mat4">
					<uniformName>textureMatrix</uniformName>
					<boundObject>Renderer'renderer'</boundObject>
					<objectMemberName>getTextureMatrix</objectMemberName>
				</object>
				<object class="ShaderUniformUpdaterConcrete_Color">
					<uniformName>color_multiply</uniformName>
					<boundObject>Renderer'renderer'</boundObject>
					<objectMemberName>getColorMultiply</objectMemberName>
				</object>
			</uniformUpdaters>
		</passthrough>
		
	</object>

	<!-- For Lighting -->

	<object class="SimpleMeshLoader" name="SM_ZeroCenteredDiameter2">
		<vertexStructure>VS_Pos2TexCoord2</vertexStructure>
		<primitiveType>TriangleStrip</primitiveType>
		<components>[-1| 1| 0.0| 1.0|
			1| 1| 1.0| 1.0|
			-1|-1| 0.0| 0.0|
			1|-1| 1.0| 0.0
			]</components>
	</object>


	<object class="SimpleMeshLoader" name="SM_WholeScreenQuad">
		<vertexStructure>VS_Pos2TexCoord2</vertexStructure>
		<primitiveType>TriangleStrip</primitiveType>
		<components>[-1| -1| 0| 0|
			1| -1| 1| 0|
			-1|  1| 0| 1|
			1|  1| 1| 1
			]</components>
	</object>

	<object class="ShaderProgramLoader" name="SP_WholeScreen">
		<vertexShaderSourceText>
			
			attribute vec2 position;
			attribute vec2 texCoord;
			
			varying lowp vec2 fragment_texCoord;
			
			void main()
			{
			gl_Position = vec4( position, 0.0, 1.0 );
			fragment_texCoord = texCoord;
			}
			
		</vertexShaderSourceText>
		<fragmentShaderSourceText><![CDATA[
			
			uniform sampler2D diffuseTexture;
			
			varying lowp vec2 fragment_texCoord;
			
			void main()
			{
			gl_FragColor = texture2D( diffuseTexture, fragment_texCoord );
			}
			
		]]></fragmentShaderSourceText>
		
		<vertexStructure>VS_Pos2TexCoord2</vertexStructure>
		
	</object>



</objects>
